//https://school.programmers.co.kr/learn/courses/30/lessons/131701

//나의 풀이
import java.util.*;
class Solution {
    public int solution(int[] elements) {
        Set<Integer> set = new HashSet<>();

        ArrayList<Integer> arrayList = new ArrayList<>();
        for(int i = 0; i < elements.length; i++){
            arrayList.add(elements[i]);
            set.add(elements[i]);
        }
        for(int i = 0; i < elements.length; i++){
            arrayList.add(elements[i]);
        }

        for(int i = 2; i <= elements.length; i++){
            int startIdx = 0;
            while (true){
                int temp = 0;
                for(int j = startIdx; j < startIdx + i; j++){
                    temp += arrayList.get(j);
                }
                set.add(temp);
                startIdx++;
                if(startIdx % elements.length == 0) break;
            }
        }
        return set.size();
    }
}



//더 효율적인 DP 를 이용한 다른 사람의 풀이
import java.util.*;

class Solution {
        public int solution(int[] elements) {
            Set<Integer> set = new HashSet<>();
            int[] dp = new int[elements.length];
            for(int len = 1;len <= elements.length; len++){
                for(int i = 0;i<elements.length;i++){
                    dp[i] += elements[(len+i-1)%elements.length];
                    set.add(dp[i]);
                }
            }
            return set.size();
        }
    }
